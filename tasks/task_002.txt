# Task ID: 2
# Title: Implement Order Processing System
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create a system to handle order creation, confirmation, and basic email notifications upon successful payment.
# Details:
1. Create an 'orders' table in Supabase
2. Implement order creation logic after successful Stripe payment
3. Generate unique order IDs
4. Store order details including products, quantities, and customer information
5. Set up Supabase Edge Functions for sending order confirmation emails
6. Use a templating engine like Handlebars for email templates
7. Implement error handling and logging

Supabase Edge Function for sending emails:
```javascript
import { createClient } from '@supabase/supabase-js';
import nodemailer from 'nodemailer';

export async function handler(event, context) {
  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
  const { orderId } = JSON.parse(event.body);
  
  // Fetch order details from database
  const { data: order, error } = await supabase
    .from('orders')
    .select('*')
    .eq('id', orderId)
    .single();
  
  if (error) throw error;
  
  // Send email using nodemailer
  const transporter = nodemailer.createTransport(/* SMTP config */);
  await transporter.sendMail({
    from: 'orders@vallesagrado.com',
    to: order.customer_email,
    subject: 'Order Confirmation',
    html: `<h1>Thank you for your order #${order.id}</h1>...`
  });
  
  return { statusCode: 200, body: JSON.stringify({ message: 'Email sent' }) };
}
```

# Test Strategy:
1. Unit test order creation function
2. Integration test order flow from payment to database insertion
3. Test email sending functionality with various SMTP providers
4. Verify email content and formatting
5. Test error handling scenarios (e.g., email sending failure)
