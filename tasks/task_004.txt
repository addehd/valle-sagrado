# Task ID: 4
# Title: Implement Basic Order Management for Admins
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Create a simple interface for admins to view and update order statuses.
# Details:
1. Add an 'Orders' section to the admin dashboard
2. Implement a list view of all orders with key details
3. Create a detailed view for individual orders
4. Add functionality to update order status (e.g., processing, shipped, delivered)
5. Implement filtering and sorting options for orders
6. Add basic search functionality

Svelte component for order list:
```svelte
<script>
import { onMount } from 'svelte';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY');

let orders = [];

onMount(async () => {
  const { data, error } = await supabase
    .from('orders')
    .select('*')
    .order('created_at', { ascending: false });
  
  if (data) orders = data;
});

async function updateStatus(orderId, newStatus) {
  const { data, error } = await supabase
    .from('orders')
    .update({ status: newStatus })
    .eq('id', orderId);
  
  // Update local state or refetch orders
}
</script>

<table>
  <thead>
    <tr>
      <th>Order ID</th>
      <th>Customer</th>
      <th>Total</th>
      <th>Status</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {#each orders as order}
      <tr>
        <td>{order.id}</td>
        <td>{order.customer_name}</td>
        <td>${order.total.toFixed(2)}</td>
        <td>{order.status}</td>
        <td>
          <select on:change={(e) => updateStatus(order.id, e.target.value)}>
            <option value="processing">Processing</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Delivered</option>
          </select>
        </td>
      </tr>
    {/each}
  </tbody>
</table>
```

# Test Strategy:
1. Unit test order status update function
2. Integration test order list fetching and display
3. Test filtering and sorting functionality
4. Verify real-time updates when order status changes
5. Test search functionality with various inputs
6. Perform usability testing on the order management interface
