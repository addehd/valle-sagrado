# Task ID: 9
# Title: Secure API Keys with Environment Variables
# Status: done
# Dependencies: 1, 8
# Priority: high
# Description: Move all sensitive API keys from public files to a .env.local file and ensure this file is added to .gitignore to prevent accidental exposure of credentials.
# Details:
1. Identify all API keys and sensitive credentials in the codebase:
   - Stripe API keys
   - Supabase credentials
   - Any other third-party service credentials

2. Create a .env.local file in the project root with the following structure:
```
# Stripe Configuration
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...

# Supabase Configuration
PUBLIC_SUPABASE_URL=https://your-project.supabase.co
PUBLIC_SUPABASE_ANON_KEY=your-anon-key

# Other API Keys
OTHER_SERVICE_API_KEY=your-api-key
```

3. Ensure .env.local is added to .gitignore:
```
# Add to .gitignore
.env.local
.env.*.local
```

4. Update all references in the codebase to use environment variables:
   - For server-side code (SvelteKit endpoints, hooks, etc.):
     ```javascript
     import { STRIPE_SECRET_KEY } from '$env/static/private';
     
     // Use STRIPE_SECRET_KEY in your code
     ```
   
   - For client-side code (components, stores, etc.):
     ```javascript
     import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
     
     // Use PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY in your code
     ```

5. Update the Stripe integration code:
   - Modify `/api/checkout` endpoint to use environment variables
   - Update any client-side Stripe initialization

6. Update Supabase client initialization:
   ```javascript
   import { createClient } from '@supabase/supabase-js';
   import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
   
   export const supabase = createClient(
     PUBLIC_SUPABASE_URL,
     PUBLIC_SUPABASE_ANON_KEY
   );
   ```

7. Create a .env.example file with the structure but without actual values:
   ```
   # Stripe Configuration
   STRIPE_SECRET_KEY=
   STRIPE_PUBLISHABLE_KEY=
   
   # Supabase Configuration
   PUBLIC_SUPABASE_URL=
   PUBLIC_SUPABASE_ANON_KEY=
   
   # Other API Keys
   OTHER_SERVICE_API_KEY=
   ```

8. Document the environment variable requirements in the project README.md:
   - List all required environment variables
   - Provide instructions for obtaining API keys
   - Explain how to set up the .env.local file

9. Verify that no sensitive information is committed to the repository by checking all recent commits and public files.

# Test Strategy:
1. Verify .gitignore configuration:
   - Check that .env.local is listed in the .gitignore file
   - Attempt to stage .env.local and confirm Git ignores it

2. Test environment variable loading:
   - Create a test .env.local file with dummy values
   - Run the application locally and verify it starts without errors
   - Check server logs to ensure no "missing environment variable" errors

3. Test Stripe integration:
   - Complete a test purchase flow using test API keys
   - Verify payment processing works correctly
   - Check that no API keys are visible in browser network requests

4. Test Supabase integration:
   - Verify authentication flows work correctly
   - Test database operations to ensure connectivity
   - Confirm that Supabase client is initialized with environment variables

5. Security audit:
   - Use grep or similar tools to search for hardcoded API keys:
     ```bash
     grep -r "sk_" --include="*.js" --include="*.ts" --include="*.svelte" ./src
     grep -r "pk_" --include="*.js" --include="*.ts" --include="*.svelte" ./src
     ```
   - Check browser network requests to ensure no API keys are leaked
   - Review frontend bundle to verify no secret keys are included

6. Documentation verification:
   - Confirm README.md includes clear instructions for environment setup
   - Verify .env.example exists and contains all required variables (without values)

7. Deployment test:
   - Test the application in a staging environment with proper environment variables
   - Verify that the application can access all required services
   - Confirm that no sensitive data is exposed in logs or error messages
