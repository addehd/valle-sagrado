# Task ID: 13
# Title: Implement Dynamic Project Favicon
# Status: done
# Dependencies: 8
# Priority: medium
# Description: Create functionality to dynamically display project-specific favicons when users are viewing project pages (/[project]) instead of the default Valle Sagrado favicon.
# Details:
1. Create a system to store project logos suitable for favicon use:
   - Add a `favicon` or `logo` field to the project data model
   - Ensure uploaded images are properly sized for favicon use (typically 32x32px or 16x16px)
   - Store favicon images in an appropriate location (e.g., public/favicons/[project-id].png)

2. Implement dynamic favicon switching logic:
   - Create a utility function to determine the current project context from the URL
   - Modify the app's head component to dynamically set the favicon based on the current route
   - Handle fallback to the default favicon when no project is active or when the project has no custom favicon

3. Update the SvelteKit layout component to include dynamic favicon links:
```svelte
<script>
  import { page } from '$app/stores';
  import { onMount } from 'svelte';
  import { getProjectFromUrl } from '$lib/utils/project';
  
  let currentProject = null;
  let faviconPath = '/favicon.png'; // Default favicon
  
  $: {
    // Extract project from URL when route changes
    const projectSlug = $page.params.project;
    if (projectSlug) {
      // Fetch project data or use cached data
      getProjectData(projectSlug).then(project => {
        currentProject = project;
        // Update favicon if project has a custom one
        if (project && project.favicon) {
          faviconPath = project.favicon;
        } else {
          faviconPath = '/favicon.png'; // Fallback to default
        }
      });
    } else {
      // Reset to default when not in a project context
      faviconPath = '/favicon.png';
      currentProject = null;
    }
  }
</script>

<svelte:head>
  <link rel="icon" href={faviconPath} />
</svelte:head>
```

4. Add favicon upload capability to the project management interface:
   - Extend the project creation/editing form to include favicon upload
   - Add image processing to ensure proper dimensions and format
   - Implement preview functionality to show how the favicon will appear

5. Optimize favicon delivery:
   - Consider using different favicon formats for different browsers (ico, png, svg)
   - Implement proper caching headers for favicon resources
   - Consider using a favicon package like `svelte-favicon` if complexity increases

# Test Strategy:
1. Unit Testing:
   - Create unit tests for the project URL parsing utility
   - Test the favicon selection logic with various URL patterns
   - Verify fallback behavior when project data is missing or incomplete

2. Integration Testing:
   - Verify that the favicon correctly updates when navigating between different project pages
   - Test the favicon upload functionality in the project management interface
   - Ensure proper error handling when favicon images fail to load

3. Manual Testing:
   - Navigate to different project pages and verify the favicon changes appropriately
   - Test across multiple browsers (Chrome, Firefox, Safari, Edge) to ensure compatibility
   - Check favicon appearance on different devices (desktop, mobile, tablet)
   - Verify favicon appears correctly in browser tabs, bookmarks, and history

4. Performance Testing:
   - Measure any impact on page load time from the dynamic favicon implementation
   - Verify that favicon switching doesn't cause layout shifts or other visual disruptions

5. Edge Cases:
   - Test behavior when rapidly switching between projects
   - Verify behavior when a project has an invalid or corrupted favicon
   - Test with very long project names and special characters in project slugs
