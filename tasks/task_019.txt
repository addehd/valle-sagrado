# Task ID: 19
# Title: Implement Vercel MCP Server for Valle Sagrado Platform
# Status: done
# Dependencies: 3, 8
# Priority: medium
# Description: Create a Model Context Protocol (MCP) server that integrates with the Valle Sagrado platform, enabling AI assistants like Cursor to access platform data including projects, products, and statistics.
# Details:
1. Set up the MCP server infrastructure:
   - Create a new API route in the existing Next.js application under `/api/mcp`
   - Implement the core MCP protocol handlers following Vercel's MCP specification
   - Configure proper authentication and authorization for MCP requests

2. Implement the following MCP tools:
   - `getProjects`: Retrieve a list of all projects with basic information
   - `getProjectDetails`: Get comprehensive details about a specific project
   - `getProducts`: Retrieve product catalog with filtering options
   - `getPlatformStatistics`: Generate platform usage and performance metrics
   - `rollDice`: Utility function for random number generation (for testing/demo purposes)

3. Create data access layer for MCP tools:
   - Implement Supabase queries to fetch required data
   - Ensure proper error handling and response formatting
   - Add caching mechanisms for frequently accessed data

4. Implement schema definitions for MCP tools:
   - Define JSON schema for each tool's input parameters
   - Create response type definitions for structured data
   - Document schema in OpenAPI-compatible format

5. Configure Cursor integration:
   - Set up the MCP endpoint URL in Cursor settings
   - Configure authentication credentials
   - Test the connection between Cursor and the MCP server

6. Implement security measures:
   - Add rate limiting to prevent abuse
   - Implement proper authentication using API keys
   - Add logging for all MCP requests for auditing
   - Ensure sensitive data is properly filtered

7. Create documentation:
   - Document each MCP tool with examples
   - Provide integration guide for Cursor and other AI assistants
   - Add inline code documentation

Sample MCP tool implementation:
```typescript
// api/mcp/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { tool, parameters } = body;
    
    // Validate request authentication
    const authHeader = req.headers.get('authorization');
    if (!validateAuth(authHeader)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Handle different MCP tools
    switch (tool) {
      case 'getProjects':
        return await handleGetProjects(parameters);
      case 'getProjectDetails':
        return await handleGetProjectDetails(parameters);
      case 'getProducts':
        return await handleGetProducts(parameters);
      case 'getPlatformStatistics':
        return await handleGetPlatformStatistics(parameters);
      case 'rollDice':
        return await handleRollDice(parameters);
      default:
        return NextResponse.json({ error: 'Unknown tool' }, { status: 400 });
    }
  } catch (error) {
    console.error('MCP error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

async function handleGetProjects(parameters: any) {
  const { data, error } = await supabase
    .from('projects')
    .select('id, name, description, status, created_at');
    
  if (error) throw error;
  
  return NextResponse.json({ projects: data });
}

async function handleGetProjectDetails(parameters: any) {
  const { projectId } = parameters;
  
  if (!projectId) {
    return NextResponse.json({ error: 'Project ID is required' }, { status: 400 });
  }
  
  const { data, error } = await supabase
    .from('projects')
    .select('*, products(*), location(*)')
    .eq('id', projectId)
    .single();
    
  if (error) throw error;
  
  return NextResponse.json({ project: data });
}

// Implement other handlers similarly
```

# Test Strategy:
1. Unit Testing:
   - Create unit tests for each MCP tool function using Jest
   - Mock Supabase responses to test different scenarios
   - Test error handling and edge cases
   - Verify schema validation works correctly

2. Integration Testing:
   - Set up a test environment with a test database
   - Create test data in Supabase for projects, products, etc.
   - Test each MCP endpoint with real API calls
   - Verify data consistency between direct database queries and MCP responses

3. Cursor Integration Testing:
   - Configure Cursor to use the test MCP server
   - Test each tool through the Cursor interface
   - Verify that Cursor can properly interpret and display the returned data
   - Test error scenarios and verify appropriate error messages

4. Security Testing:
   - Attempt to access MCP endpoints without proper authentication
   - Test rate limiting by sending multiple requests in quick succession
   - Verify that sensitive data is properly filtered from responses
   - Test with malformed requests to ensure proper error handling

5. Performance Testing:
   - Measure response times for each MCP tool
   - Test with varying amounts of data to ensure scalability
   - Verify caching mechanisms are working correctly
   - Test concurrent requests to ensure stability

6. Manual Testing Checklist:
   - Verify getProjects returns the correct list of projects
   - Test getProjectDetails with various project IDs
   - Check that getProducts returns the expected product catalog
   - Verify getPlatformStatistics returns accurate metrics
   - Test rollDice with different parameters
   - Verify all tools work correctly when accessed through Cursor

7. Documentation Verification:
   - Ensure all MCP tools are properly documented
   - Verify that the integration guide works by following it step by step
   - Check that error messages are clear and helpful
