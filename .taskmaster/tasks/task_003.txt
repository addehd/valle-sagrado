# Task ID: 3
# Title: Create Image Download Utility for DALL-E Images
# Status: pending
# Dependencies: None
# Priority: high
# Description: Develop a utility function to download images from temporary DALL-E URLs before they expire.
# Details:
Create a utility function that downloads images from temporary DALL-E URLs using Node.js fetch API (or axios):

```javascript
import fetch from 'node-fetch'
import fs from 'fs/promises'
import path from 'path'
import { v4 as uuidv4 } from 'uuid'

// Temporary directory for downloaded images
const TEMP_DIR = path.join(process.cwd(), 'tmp')

/**
 * Downloads an image from a DALL-E temporary URL
 * @param {string} url - The temporary DALL-E image URL
 * @returns {Promise<{filePath: string, fileName: string, mimeType: string}>}
 */
async function downloadDallEImage(url) {
  try {
    // Ensure temp directory exists
    await fs.mkdir(TEMP_DIR, { recursive: true })
    
    // Generate unique filename
    const fileName = `dalle-${uuidv4()}.png`
    const filePath = path.join(TEMP_DIR, fileName)
    
    // Download the image
    const response = await fetch(url)
    
    if (!response.ok) {
      throw new Error(`Failed to download image: ${response.statusText}`)
    }
    
    const mimeType = response.headers.get('content-type')
    const buffer = await response.arrayBuffer()
    
    // Save to temporary file
    await fs.writeFile(filePath, Buffer.from(buffer))
    
    return { filePath, fileName, mimeType }
  } catch (error) {
    console.error('Error downloading DALL-E image:', error)
    throw error
  }
}

// Clean up temporary files
async function cleanupTempFile(filePath) {
  try {
    await fs.unlink(filePath)
  } catch (error) {
    console.error('Error cleaning up temporary file:', error)
  }
}
```

Consider implementing a retry mechanism with exponential backoff for reliability:

```javascript
async function downloadWithRetry(url, maxRetries = 3) {
  let lastError
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      return await downloadDallEImage(url)
    } catch (error) {
      lastError = error
      const delay = Math.pow(2, attempt) * 1000
      console.log(`Retry ${attempt + 1}/${maxRetries} after ${delay}ms`)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
  
  throw lastError
}
```

# Test Strategy:
1. Test downloading images from valid DALL-E URLs
2. Verify the downloaded files match the original images
3. Test error handling with invalid or expired URLs
4. Test the retry mechanism by simulating network failures
5. Verify temporary files are created in the expected location
6. Test cleanup functionality to ensure no temporary files are left behind
7. Measure download performance and optimize if necessary
