# Task ID: 9
# Title: Implement API Endpoints for Image Storage Management
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Create API endpoints to manage image storage, including manual upload, retrieval, and deletion.
# Details:
Implement RESTful API endpoints for image storage management:

```javascript
import express from 'express'
import multer from 'multer'
import { createClient } from '@supabase/supabase-js'
import { uploadWithRetry } from './upload-utils'
import { updateDesignWithStorageInfo } from './database-utils'

const router = express.Router()
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

// Configure multer for file uploads
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    // Accept only image files
    if (file.mimetype.startsWith('image/')) {
      cb(null, true)
    } else {
      cb(new Error('Only image files are allowed'))
    }
  }
})

// Get image by design ID
router.get('/designs/:designId/image', async (req, res, next) => {
  try {
    const { designId } = req.params
    
    // Get design from database
    const { data, error } = await supabase
      .from('custom_design')
      .select('storage_url, storage_path, original_url')
      .eq('id', designId)
      .single()
    
    if (error) {
      return res.status(404).json({ error: 'Design not found' })
    }
    
    if (!data.storage_url) {
      return res.status(404).json({ error: 'Image not found in storage' })
    }
    
    // Return the image URL
    res.json({
      url: data.storage_url,
      path: data.storage_path,
      originalUrl: data.original_url
    })
  } catch (error) {
    next(error)
  }
})

// Upload image for a design
router.post('/designs/:designId/image', upload.single('image'), async (req, res, next) => {
  try {
    const { designId } = req.params
    const file = req.file
    
    if (!file) {
      return res.status(400).json({ error: 'No image file provided' })
    }
    
    // Check if design exists
    const { data: design, error: designError } = await supabase
      .from('custom_design')
      .select('id')
      .eq('id', designId)
      .single()
    
    if (designError) {
      return res.status(404).json({ error: 'Design not found' })
    }
    
    // Generate filename
    const fileName = `manual-${Date.now()}-${file.originalname}`
    
    // Upload to Supabase Storage directly from memory
    const { data, error } = await supabase.storage
      .from('design-images')
      .upload(`manual/${fileName}`, file.buffer, {
        contentType: file.mimetype,
        cacheControl: '3600'
      })
    
    if (error) {
      return res.status(500).json({ error: 'Failed to upload image', details: error.message })
    }
    
    // Get public URL
    const { data: urlData } = supabase.storage
      .from('design-images')
      .getPublicUrl(`manual/${fileName}`)
    
    // Update database
    await updateDesignWithStorageInfo(
      designId,
      urlData.publicUrl,
      `manual/${fileName}`,
      null // No original URL for manual uploads
    )
    
    res.status(201).json({
      url: urlData.publicUrl,
      path: `manual/${fileName}`
    })
  } catch (error) {
    next(error)
  }
})

// Delete image
router.delete('/designs/:designId/image', async (req, res, next) => {
  try {
    const { designId } = req.params
    
    // Get design from database
    const { data, error } = await supabase
      .from('custom_design')
      .select('storage_path')
      .eq('id', designId)
      .single()
    
    if (error || !data.storage_path) {
      return res.status(404).json({ error: 'Image not found' })
    }
    
    // Delete from storage
    const { error: deleteError } = await supabase.storage
      .from('design-images')
      .remove([data.storage_path])
    
    if (deleteError) {
      return res.status(500).json({ error: 'Failed to delete image', details: deleteError.message })
    }
    
    // Update database
    await supabase
      .from('custom_design')
      .update({
        storage_url: null,
        storage_path: null,
        updated_at: new Date().toISOString()
      })
      .eq('id', designId)
    
    res.json({ success: true, message: 'Image deleted successfully' })
  } catch (error) {
    next(error)
  }
})

export default router
```

Implement an admin endpoint for storage management:

```javascript
// Get storage statistics
router.get('/admin/storage/stats', async (req, res, next) => {
  try {
    // Verify admin permissions
    if (!req.user || !req.user.isAdmin) {
      return res.status(403).json({ error: 'Unauthorized' })
    }
    
    // Get bucket info
    const { data: bucketData, error: bucketError } = await supabase.storage
      .getBucket('design-images')
    
    if (bucketError) {
      return res.status(500).json({ error: 'Failed to get bucket info' })
    }
    
    // Count images in database
    const { count, error: countError } = await supabase
      .from('custom_design')
      .select('id', { count: 'exact', head: true })
      .not('storage_url', 'is', null)
    
    if (countError) {
      return res.status(500).json({ error: 'Failed to count images' })
    }
    
    res.json({
      bucket: bucketData,
      totalImages: count,
      createdAt: bucketData.created_at,
      updatedAt: bucketData.updated_at
    })
  } catch (error) {
    next(error)
  }
})
```

# Test Strategy:
1. Test each API endpoint with valid inputs
2. Test error handling with invalid inputs
3. Verify authentication and authorization for protected endpoints
4. Test file upload with various file types and sizes
5. Verify image retrieval returns the correct URLs
6. Test image deletion removes files from storage and updates the database
7. Verify admin endpoints provide accurate statistics
8. Test API rate limiting and performance under load
9. Verify CORS configuration allows access from the frontend application
